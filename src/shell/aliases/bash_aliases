shopt -s expand_aliases  

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias cd..='cd ..'
alias cat='ccat'
alias psd='python setup.py develop'
alias hgw='hg addremove & hg commit -m'
alias gid="openssl rand -base64 9 | tr [a-z] [A-Z]"
alias tw='trans -fr'
alias release-me='curl -LsS https://raw.githubusercontent.com/falcucci/release-me/master/changelog-it.sh | bash -s $1 $2'
alias npmt='npm run test'
alias npmd='npm run dev'

alias npmd='npm run dev'

alias pmd=openpomodoro-cli

# ----------------------------------------------------------------------
# | Mercurial aliases |
# ----------------------------------------------------------------------
alias hgs='hg status'
alias mdev='hg merge development'
alias hud='hg update development'
# default push command
push_(){
    hg push -b $(hg branch)
}
alias hgb="hg branch"
alias hgpull="hg pull -u"
alias hgd="hg wdiff"
alias hgp=push_
alias hgu="hg update $1"


# ----------------------------------------------------------------------
# | ANCHOR SERVERS |
# ----------------------------------------------------------------------
alias test='ssh anchor@test.anchor-webapps.com -p 24666'
alias test2='ssh anchor@test2.anchor-webapps.com -p 24666'
alias test5='ssh anchor@test5.anchor-webapps.com -p 24666'
alias test6='ssh anchor@test6.anchor-webapps.com -p 24666'
alias test7='ssh anchor@test7.anchor-webapps.com -p 24666'
alias test8='ssh anchor@test8.anchor-webapps.com -p 24666'
alias testops='ssh anchor@testops.anchor-webapps.com -p 24666'


# ----------------------------------------------------------------------
# | Jira commands |
# ----------------------------------------------------------------------


alias jl='jira issue list'
jira_open_(){
  if [ "$1" != "" ]
  then
    jira issue open $1
  else
    jira issue open $(hg branch)
  fi
}
alias jo=jira_open_
jira_task_show_(){
  if [ "$1" != "" ]
  then
    jira issue $1
  else
    jira issue $(hg branch)
  fi
}
alias jd=jira_task_show_


jira_start_(){
  if [ "$1" != "" ]
  then
    jira issue trans $1 "in progress"
  else
    jira issue trans $(hg branch) "in progress"
  fi
}


jira_pause_(){
  if [ "$1" != "" ]
  then
    jira issue trans $1 "to do"
  else
    jira issue trans $(hg branch) "to do"
  fi
}


jira_done_(){
  if [ "$1" != "" ]
  then
    jira issue trans $1 "code review"
  else
    jira issue trans $(hg branch) "code review"
  fi
}


show_pull_requests_(){
  if [ "$1" != "" ]
  then
    branch_name="${1,,}"
    command="curl --user alex.falcucci@gmail.com:whdesign -s https://bitbucket.org/api/internal/my/pull-requests | json_pp | cat | jq -r '.[] | .url' | awk '/$branch_name/{print}'"
    jo $branch_name
    new=`eval $command`
    for i in $new
    do
      echo "https://bitbucket.org$i" | xargs xdg-open > /dev/null 2> /dev/null
    done
  else
    branch_name="$(hg branch)"
    jira_task="${branch_name,,}"
    command="curl --user alex.falcucci@gmail.com:whdesign -s https://bitbucket.org/api/internal/my/pull-requests | json_pp | cat | jq -r '.[] | .url' | awk '/$jira_task/{print}'"
    jo
    new=`eval $command`
    for i in $new
    do
      echo "https://bitbucket.org$i" | xargs xdg-open > /dev/null 2> /dev/null
    done
  fi
}


alias jira-s=jira_start_
alias jira-p=jira_pause_
alias jira-d=jira_done_
alias prshow=show_pull_requests_
# ----------------------------------------------------------------------
# | Utilities |
# ----------------------------------------------------------------------


# Alias for translate each words from pt-br or EN
alias t='trans :pt'


alias tb='trans :en'
alias typing='tt'
alias now="cowsay 'Welcome $USER! It's now \[\$(date +%H:%M:%S)\]\'"


alias bright="xbacklight -set 100"
# function to activate anchor virtual env
activate_anchor_virtualenv(){
    . ~/anchor/anchor-env/bin/activate
}
alias env_anchor=activate_anchor_virtualenv
git_commit_(){
    git commit -am "$1"
}
alias gc=git_commit_
git_push_(){
    git push origin $(git rev-parse --abbrev-ref HEAD)
}
random_(){
  git add -A && git commit -e -am "$(auto-commit --dry-run | awk '{ print tolower($0) }')";
}

gpt_commit_(){
  cligpt "describe well a commit in raw markdown mode with a title,  two paragraphs and then the body based on this diff: \n $(git diff --staged)"
}

commit_() {
  git add -A && git commit -e -am "$(gpt_commit_ | awk '{ print tolower($0) }')"; 
}

auto_issue_(){
  gpt "generate an issue description with three paragraphs about the following title: $1"
}

docstring_(){
  gpt "generate a docstring in $1 for the folowing code and params: $2"
}

autodaily_() {
  gpt "describe item by item what I have done today with four paragraphs based on the the following tasks: $(gh search issues --author "@me")"
}

# https://github.com/paij0se/cligpt
gpt_(){
  cligpt "$1"
}

what_i_did_today_()  {
 gh search issues --assignee=@me
}

typing_test_() {
  curl -LsS https://raw.githubusercontent.com/lemnos/tt/master/src/tt.go |  head -n 20 | tt -noskip -raw
}

answerec_() {
  gpt "I'll add an job opportunity from a recruiter and you must give me a consistent answer, add my calendar link https://cal.com/falcucci to schedule a call and don't say which time I am available: $1"
}

open_neovide_(){
  if [ "$1" != "" ]
  then
    open /Users/falcucci/neovide/target/release/bundle/osx/Neovide.app --args $PWD/$1 --multigrid
  else
    open /Users/falcucci/neovide/target/release/bundle/osx/Neovide.app --args $PWD --multigrid
  fi
}

alias gpt_commit=gpt_commit_
alias commit=commit_
alias gp=git_push_
alias gs="git status"
alias gb="git branch"
alias gr=random_
alias gpt=gpt_
alias gitopen="gh browse"
alias autoissue=auto_issue_
alias answerec=answerec_
alias docstring=docstring_
alias autodaily=autodaily_
alias taskstoday=what_i_did_today_
alias typecode=typing_test_
alias italian="trans :it $1"
alias move="genact -s 10"
# alias nv="neovide --multigrid $1"
alias nv=open_neovide_


# A bash script called up so that if I'm in /a/very/deeply/nested/path/somewhere
# and I want to go "up" N directories, I can type up N:
# /a/very/deeply/nested/path/somewhere> up 4
# /a/very>
# details on: https://stackoverflow.com/a/245724/3659023
function up( )
{
  LIMIT=$1
  P=$PWD
  for ((i=1; i <= LIMIT; i++))
  do
    P=$P/..
  done
  cd $P
  export MPWD=$P
}


function back( )
{
  LIMIT=$1
  P=$MPWD
  for ((i=1; i <= LIMIT; i++))
  do
    P=${P%/..}
  done
  cd $P
  export MPWD=$P
}


# Codi
# Usage: codi [filetype] [filename]
codi() {
  local syntax="${1:-python}"
  shift
  vim -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}


# ----------------------------------------------------------------------
# | Opening files with FZF|
# ----------------------------------------------------------------------


# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}


# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR


fo() {
  local out file key
  IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}


# vf - fuzzy open with vim from anywhere
# ex: vf word1 word2 ... (even part of a file name)
# zsh autoload function
vf() {
  local files


  files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})


  if [[ -n $files ]]
  then
     vim -- $files
     print -l $files[1]
  fi
}


# fuzzy grep open via ag
vg() {
  local file


  file="$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1 " +" $2}')"


  if [[ -n $file ]]
  then
     vim $file
  fi
}


# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}


# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}


# fdr - cd to selected parent directory
fdr() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
  cd "$DIR"
}


# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
cf() {
  local file


  file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"


  if [[ -n $file ]]
  then
     if [[ -d $file ]]
     then
        cd -- $file
     else
        cd -- ${file:h}
     fi
  fi
}


# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}


# v - open files in ~/.viminfo
v() {
  local files
  files=$(grep '^>' ~/.viminfo | cut -c3- |
          while read line; do
            [ -f "${line/\~/$HOME}" ] && echo "$line"
          done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}


# c - browse chrome history
c() {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'


  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
    open=open
  else
    google_history="$HOME/.config/chromium/Default/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}


# f - browse Safari history
f() {
  local cols sep safari_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'


  if [ "$(uname)" = "Darwin" ]; then
    safari_history="/Users/falcucci/Library/Safari/History.db"
    open=open
  fi
  cp -f "$safari_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url from history_visits
     inner join history_items on history_items.id = history_visits.history_item
     order by visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# fh - repeat history
runcmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, <>' ; }

fh() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | runcmd
}

# fhe - repeat history edit
writecmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, do{ chomp($_ = <>); $_ }' ; }

fhe() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | writecmd
}



# fh - repeat history
fh() {
  # eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || tac ~/.bash_history | awk '!x[$0]++' | tac ) | fzf +s --tac)
}




tmux_anchor_(){
    tmux new-session "tmux source-file ~/tmux_anchor"
}
alias tmux_anchor=tmux_anchor_
# ----------------------------------------------------------------------
# | Network                                                            |
# ----------------------------------------------------------------------


alias ip='dig +short myip.opendns.com @resolver1.opendns.com'


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


if [ "$OS" == 'osx' ]; then
    alias local-ip='ipconfig getifaddr en1'
elif [ "$OS" == 'ubuntu' ]; then
    alias local-ip="ifconfig | \
                    | grep 'inet addr' \
                    | grep -v '127.0.0.1' \
                    | cut -d: -f2 \
                    | cut -d' ' -f1"
fi


# ----------------------------------------------------------------------
# | Package Managers                                                   |
# ----------------------------------------------------------------------


# OS specific package managers


if [ "$OS" == 'osx' ]; then


    # Homebrew
    if command -v 'brew' &> /dev/null; then
        alias brewd='brew doctor'
        alias brewi='brew install'
        alias brewr='brew uninstall'
        alias brews='brew search'
        alias brewu='brew update \
                      && brew upgrade --all \
                      && brew cleanup \
                      && brew cask cleanup'
    fi


elif [ "$OS" == 'ubuntu' ]; then


    # Advanced Packaging Tool
    alias apti='sudo apt-get install'
    alias aptr='sudo apt-get remove'
    alias apts='sudo apt-cache search'
    alias aptu='sudo apt-get update \
                 && sudo apt-get upgrade'


fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Update


if [ "$OS" == 'osx' ]; then


    alias update='sudo softwareupdate --install --all \
                   && brew update \
                   && brew upgrade --all \
                   && brew cleanup \
                   && npm install -g npm \
                   && npm update -g'


elif [ "$OS" == 'ubuntu' ]; then


    alias update='sudo apt-get update \
                   && sudo apt-get upgrade \
                   && npm install -g npm \
                   && npm upgrade -g'


fi


# ----------------------------------------------------------------------
# | Shorter Commands                                                   |
# ----------------------------------------------------------------------


alias :q='exit'
alias e='vi'
alias g='git'
alias gd='git icdiff'
alias ll='ls -l'
alias m='man'
alias map='xargs -n1'
alias q='exit'
alias rm='rm -rf'

alias ghistory='git-file-history $1'


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Copy to clipboard


if [ "$OS" == 'osx' ]; then
    alias cc='pbcopy'
elif [ "$OS" == 'ubuntu' ]; then
    alias cc='xclip -selection clip'
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Empty Trash


if [ "$OS" == 'osx' ]; then


    # Empty the trash, the main HDD and on all mounted volumes
    # and clear Apple’s system logs to improve shell startup speed


    alias empty-trash='sudo rm -frv /Volumes/*/.Trashes \
                        && sudo rm -frv ~/.Trash \
                        && sudo rm -frv /private/var/log/asl/*.asl'


fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Hide/Show files


if [ "$OS" == 'osx' ]; then


    # Hide/Show desktop icons
    alias hide-desktop-icons='defaults write com.apple.finder CreateDesktop -bool false && killall Finder'
    alias show-desktop-icons='defaults write com.apple.finder CreateDesktop -bool true && killall Finder'


    # Hide/Show hidden files in Finder
    alias hide-hidden-files='defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder'
    alias show-hidden-files='defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder'


elif [ "$OS" == 'ubuntu' ]; then


    # Hide/Show desktop icons
    alias hide-desktop-icons='gsettings set org.gnome.desktop.background show-desktop-icons false'
    alias show-desktop-icons='gsettings set org.gnome.desktop.background show-desktop-icons true'


fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Lock screen


if [ "$OS" == 'osx' ]; then
    alias afk='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'
elif [ "$OS" == 'ubuntu' ]; then
    alias akf='gnome-screensaver-command --lock'
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Open


if [ "$OS" == 'osx' ]; then
    alias o='open'
elif [ "$OS" == 'ubuntu' ]; then
    alias o='xdg-open'
fi


# ----------------------------------------------------------------------


# Unset anything that just pollutes the global space


# unset OS



