" ----------------------------------------------------------------------
" | General Settings |
" ----------------------------------------------------------------------


" Pathogen exec
" execute pathogen#infect()

" load all the new aliases
let $BASH_ENV = "~/.bash_aliases"

set nocompatible " Don't make vim vi-compatibile


syntax off " Enable syntax highlighting

if !has('nvim')
  " Set directory for undo files
  set undodir=~/.vim/undos
  " added mouse support on vim xD
  set mouse=a
  " Set this to the name of your terminal that supports mouse codes.
  " Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
  set ttymouse=xterm2
endif

if has('autocmd')
  :silent !stty -ixon
  filetype plugin indent on
  " HTTPs://github.com/rhysd/nyaovim-mini-browser
  filetype plugin on


  " │ │ └──── Enable file type detection
  " │ └───────── Enable loading of indent file
  " └─────────────── Enable loading of plugin files
endif


set autoindent " Copy indent to the new line


set backspace=indent " ┐
set backspace+=eol " │ Allow `backspace`
set backspace+=start " ┘ in insert mode
nnoremap <BS> X


set backupdir=~/.vim/backups " Set directory for backup files


set backupskip=/tmp/* " ┐ Don't create backups
set backupskip+=/private/tmp/* " ┘ for certain files


set clipboard=unnamed " ┐
" │ Use the system clipboard
if has('unnamedplus') " │ as the default register
  set clipboard+=unnamedplus " │
endif " ┘



set cpoptions+=$ " When making a change, don't
" redisplay the line, and instead,
" put a `$` sign at the end of
" the changed text


set colorcolumn=73 " Highlight certain column(s)
set cursorline " Highlight the current line
set directory=~/.vim/swaps " Set directory for swap files
set encoding=utf-8 nobomb " Use UTF-8 without BOM
set history=5000 " Increase command line history
set hlsearch " Enable search highlighting
set ignorecase " Ignore case in search patterns
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

set incsearch " Highlight search pattern as
" it is being typed

set laststatus=2 " Always show the status line


set listchars=tab:▸\ " ┐
set listchars+=trail:· " │ Use custom symbols to
set listchars+=eol:↴ " │ represent invisible characters
set listchars+=nbsp:_ " ┘


set magic " Enable extended regexp
set mousehide " Hide mouse pointer while typing
set noerrorbells " Disable error bells


set nojoinspaces " When using the join command,
" only insert a single space
" after a `.`, `?`, or `!`


set nostartofline " Kept the cursor on the same column
set number " Show line number


set numberwidth=5 " Increase the minimal number of
" columns used for the `line number`


set report=0 " Report the number of lines changed
set ruler " Show cursor position


set scrolloff=5 " When scrolling, keep the cursor
" 5 lines below the top and 5 lines
" above the bottom of the screen


set shortmess=aAItW " Avoid all the hit-enter prompts
set showcmd " Show the command being typed
set showmode " Show current mode
set spelllang=en_us " Set the spellchecking language


set smartcase " Override `ignorecase` option
" if the search pattern contains
" uppercase characters


set synmaxcol=2500 " Limit syntax highlighting (this
" avoids the very slow redrawing
" when files contain long lines)


set tabstop=2 " ┐
set softtabstop=2 " │ Set global <TAB> settings
set shiftwidth=2 " │ http://vimcasts.org/e/2
set expandtab " ┘

set ttyfast " Enable fast terminal connection
set undofile " Automatically save undo history
set virtualedit=all " Allow cursor to be anywhere


set visualbell " ┐
set noerrorbells " │ Disable beeping and window flashing
set t_vb= " ┘ https://vim.wikia.com/wiki/Disable_beeping

set wildmenu
" Enable enhanced command-line
" completion (by hitting <TAB> in
" command mode, Vim will show the
" possible matches just above the
" command line with the first
" match highlighted)


" Allow windows to be squashed
set winminheight=0
set tags=./tags;/

" improve performance on big files
" set number relativenumber
:set nocursorline
:set number

:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
:  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
:augroup END

set autoread


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 NOTES                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  1 - use the command ctrl + I / ctrl + O to jumbps the cursor history  "
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



" ----------------------------------------------------------------------
" | Plugins |
" ----------------------------------------------------------------------
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install'}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'yuki-yano/fzf-preview.vim', { 'branch': 'release/rpc' }
Plug 'neoclide/coc-html', { 'do': 'yarn install'}
Plug 'neoclide/coc-json', { 'do': 'yarn install'}
Plug 'neoclide/coc-lists', { 'do': 'yarn install'}
Plug 'fannheyward/coc-pyright', { 'do': 'yarn install'}
Plug 'neoclide/coc-yaml', { 'do': 'yarn install'}
Plug 'neoclide/coc-snippets', { 'do': 'yarn install'}
Plug 'yaegassy/coc-nginx', {'do': 'yarn install --frozen-lockfile'}
Plug 'iamcco/coc-vimlsp', {'do': 'yarn install  --frozen-lockfile'}

Plug 'fannheyward/coc-rust-analyzer', {'do': 'yarn install'}
Plug 'rust-lang/rust.vim'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

Plug 'FooSoft/vim-argwrap'
Plug 'farmergreg/vim-lastplace'
Plug 'ap/vim-css-color'
Plug 'epilande/vim-es2015-snippets'
Plug 'alvan/vim-closetag'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tomtom/tcomment_vim'
Plug 'hynek/vim-python-pep8-indent'
Plug 'flazz/vim-colorschemes'
Plug 'ewilazarus/preto'
Plug 'morhetz/gruvbox'
Plug 'Yggdroot/indentLine'
Plug 'scrooloose/syntastic'
Plug 'honza/vim-snippets'
Plug 'xolox/vim-session'
" use the command cgn to replace instead
" https://vimtricks.com/p/vim-find-next/
"
Plug 'terryma/vim-multiple-cursors'
Plug 'itchyny/vim-cursorword'
Plug 'fisadev/vim-isort'
Plug 'Valloric/MatchTagAlways'
Plug 'bogado/file-line'
Plug 'Chiel92/vim-autoformat'
Plug 'tpope/vim-abolish'
Plug 'heavenshell/vim-pydocstring'
Plug 'lfilho/cosco.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'fatih/vim-go'
Plug 'pangloss/vim-javascript'
Plug 'xolox/vim-misc'
Plug 'Yggdroot/indentLine'
Plug 'matze/vim-move'
Plug 'SirVer/ultisnips'
Plug 'mileszs/ack.vim'
Plug 'flazz/vim-colorschemes'
Plug 'shougo/neosnippet'
Plug 'shougo/neosnippet-snippets'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'hynek/vim-python-pep8-indent'
Plug 'editorconfig/editorconfig-vim'
Plug 'godlygeek/tabular'
Plug 'othree/html5.vim'
Plug 'plasticboy/vim-markdown'
Plug 'raimondi/delimitmate'
Plug 'scrooloose/nerdtree'
Plug 'rking/ag.vim'
Plug 'wakatime/vim-wakatime'
Plug 'junegunn/vim-easy-align'
Plug 'huyvohcmc/atlas.vim'
" Plug 'chamindra/marvim'
Plug 'github/copilot.vim'
Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
Plug 'falcucci/dracula-vim', { 'as': 'dracula' }
" Tagbar will generate tags in memory, allowing you to navitage to
" structs, functions, etc. In the current file
Plug 'preservim/tagbar'
" Plug 'chrisbra/Colorizer'
Plug 'roxma/nvim-yarp', { 'do': 'pip install -r requirements.txt' }
Plug 'raghur/vim-ghost', {'do': ':GhostInstall'}
Plug 'skywind3000/asyncrun.vim'
Plug 'voldikss/vim-floaterm'
Plug 'voldikss/fzf-floaterm'
Plug 'mbbill/undotree'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'
" Plug 'psliwka/vim-smoothie'

call plug#end()

" make it interactive to turn on all my aliases
" set shellcmdflag=-ic

"  let g:smoothie_speed_constant_factor = 40
"  let g:smoothie_speed_linear_factor = 40
"  let g:smoothie_speed_exponentiation_factor = 0.9

command Float :FloatermToggle
let g:floaterm_keymap_toggle = '<F7>'

" reload vim with the latest configuration
command Reload :source $MYVIMRC
noremap <F5> :Reload <CR>

" adding copilot keybindings to turns it on and off
" nnoremap <silent> <leader>cc :CocCommand copilot.turnOn<CR>
" nnoremap <silent> <leader>co :CocCommand copilot.turnOff<CR>
" nnoremap <silent> <leader>cs :CocCommand copilot.suggest<CR>
" nnoremap <silent> <leader>ca :CocCommand copilot.accept<CR>
" nnoremap <silent> <leader>cd :CocCommand copilot.decline<CR>
" nnoremap <silent> <leader>cr :CocCommand copilot.reset<CR>
" nnoremap <silent> <leader>cl :CocCommand copilot.learn<CR>
" nnoremap <silent> <leader>cu :CocCommand copilot.unlearn<CR>
" nnoremap <silent> <leader>cp :CocCommand copilot.profile<CR>
" nnoremap <silent> <leader>ct :CocCommand copilot.toggle<CR>
" nnoremap <silent> <leader>ce :CocCommand copilot.enable<CR>

imap <silent><script><expr> <C-K> copilot#Next()
imap <silent><script><expr> <C-J> copilot#Suggest()

let g:copilot_enabled = 1

" Mapping doge
let g:doge_enable_mappings = 1
let g:doge_filetype_aliases =
      \    {
      \      'javascript': [
      \        'js',
      \        'javascript.jsx',
      \        'javascriptreact',
      \        'javascript.tsx',
      \        'typescriptreact',
      \        'typescript',
      \        'typescript.tsx',
      \      ],
      \    }
let g:doge_mapping = '<Leader>d'

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" change store place.
" let g:marvim_store = '$HOME/.vim/.marvim'

let g:prettier#exec_cmd_path = "/Users/falcucci/.nvm/versions/node/v10.18.1/bin/prettier"

command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

if executable('ag')
  let $FZF_DEFAULT_COMMAND='ag --ignore=*.pyc -g ""'
endif


" Customize fzf colors to match your color scheme
let g:fzf_colors =
      \ { 'fg': ['fg', 'Normal'],
      \ 'bg': ['bg', 'Normal'],
      \ 'hl': ['fg', 'Comment'],
      \ 'fg+': ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+': ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+': ['fg', 'Statement'],
      \ 'info': ['fg', 'PreProc'],
      \ 'prompt': ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker': ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header': ['fg', 'Comment'] }

" Use Vundle to manage the vim plugins
" https://github.com/gmarik/Vundle.vim

filetype on

let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'jinja' : 1,
      \ 'javascript' : 1,
      \}

let g:jsx_ext_required = 0
" filenames like *.xml, *.html, *.xhtml, ...
" Then after you press <kbd>></kbd> in these files, this plugin will try to close the current tag.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js,*.jsx'

" avoid to save the sessions automatically bc I am using them
" as a workapace manager
let g:session_autosave = 'no'
let g:session_autosave_to = 'no'

" Don't save hidden and unloaded buffers in sessions.
" set sessionoptions-=buffers

let javascript_enable_domhtmlcss = 1

" show hide files for CtrlP
let g:ctrlp_show_hidden = 1

let g:ctrlp_dotfiles = 1
"An example mapping, using the key combo <Leader>; for both normal and insert
"modes:
autocmd FileType javascript,css,jinja,jinja2,html,rust nnoremap <silent> <Leader>' :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,css,jinja,jinja2,html,rust inoremap <silent> <Leader>' <c-o>:call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript UltiSnipsAddFiletypes html
autocmd FileType javascript set tabstop=2|set shiftwidth=2|set expandtab

" [,space] Auto format python pep8
noremap <F6> :Autoformat<CR>
let g:formatdef_autopep8 = "'autopep8 - --range '.a:firstline.' '.a:lastline"
let g:formatters_python = ['autopep8']

" Enable/Disable the syntax
:map <F8> :if exists("g:syntax_on") <Bar>
      \   syntax off <Bar>
      \ else <Bar>
      \   syntax enable <Bar>
      \ endif <CR>

" To override any filetype which was already detected, use this instead (note the 'set filetype=' syntax):
" au BufRead,BufNewFile *.jinja2 set filetype=jinja
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm set ft=jinja

" ----------------------------------------------------------------------
" | Plugins - NerdTree |
" ----------------------------------------------------------------------
" NERDTree automatically when vim starts up if no files were specified

autocmd StdinReadPre * let s:std_in=1
if !exists("g:neovide")
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
endif
autocmd VimEnter * set background=dark
" not show .pyc files on nerdtree
let NERDTreeIgnore = ['\.pyc$']

" maps Ctr+lo to toggle nerdtree in the dir of the current buffer:
map <C-o> :NERDTreeToggle %<CR>

" maps Ctrl+l to search for the current word in the current directory:
map <C-i> :Rg<CR>

" maps Ctrl+P to toggle ZFZ:
map <C-p> :FZF<CR>
" map <C-p> :FzfPreviewProjectFiles <CR>

" set keyboard shurtcut to close a specific tab
nnoremap <C-q> :tabclose<CR>

" python snippets
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>" " i have to remove it if will use youcompleteme
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" stop search on with following command
set hlsearch!

let g:indentLine_color_term = 239

let NERDTreeMapOpenInTab='<ENTER>'
let g:NERDTreeNodeDelimiter = "\u00a0"

noremap <space> :

nnoremap <F10> :tabp<CR>
nnoremap <F12> :tabn<CR>

" nnoremap <buffer> <F9> :exec '!clear;python' shellescape(@%, 1)<cr>

" Runs parsed files
function! RunScript()
  let commands =
        \ {
        \ "rs": ":RustRun",
        \ "js": ":! node %",
        \ "py": ":! python3 %",
        \ "go": ":! go run %",
        \ }
  let extension = expand('%:e')
  let command = get(commands, extension)
  execute command
endf
map <F9> :call RunScript()<CR>

" nnoremap <buffer> <F9> :.w !if [ "$(echo % | sed 's/^.*\.//')" == "js" ]; then /home/falcucci/.nvm/versions/node/v8.6.0/bin/node %; fi;
" map <F9> :w<CR>:!python3 %<CR>

" use ff to exit from insert mode
:imap jj <Esc>

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" nmap  imwap gd :Tags<CR>expand("<cword>")<CR>
" fu! FzfTagsCurrWord()
"   call fzf#vim#tags({'options': '-q '.shellescape(expand('<cword>'))})
" endfu
" map gd :call FzfTagsCurrWord()
nnoremap <silent> ta :Tags <C-R><C-W><CR>

" 'quote' a word
nnoremap qw :silent! normal mpea'<Esc>bi'<Esc>`pl
" double "quote" a word
nnoremap qd :silent! normal mpea"<Esc>bi"<Esc>`pl
" remove quotes from a word
nnoremap wq :silent! normal mpeld bhd `ph<CR>

" Now you can just press F6 any time
" inside Vi/Vim and you'll get a timestamp
" like 2016-01-25 Mo 12:44 inserted at the cursor.
" nmap <F6> i<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
" imap <F6> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>

" set key to move blocks selecteds
let g:move_key_modifier = 'C'

" ----------------------------------------------------------------------
" | Plugins - Emmet |
" ----------------------------------------------------------------------

" Redefine trigger key for Emmet
" http://docs.emmet.io/cheat-sheet/
let g:user_emmet_leader_key='<C-E>'

" Load custom Emmet snippetsv
" http://docs.emmet.io/customization/snippets/

" let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.vim/plugins/emmet-vim/plugin/emmet.json')), "\n"))


" ----------------------------------------------------------------------

" save any file with Ctrl + S
:nmap <c-s> :w<CR>
:imap <c-s> <Esc>:w<CR>a

" copy to dashboard
:vmap <C-C> "+y"

" using alias to ack: AG
set runtimepath^=~/.vim/plugins/ag.vim"
let g:ackprg = "ag --vimgrep"
let g:ag_working_path_mode="r"
let g:ag_prg='ag -S --nocolor --nogroup --column --ignore node_modules'

" let &colorcolumn=join(range(81,999),",")
" let &colorcolumn="100,".join(range(400,999),",")
if exists('+colorcolumn')
  set colorcolumn=200
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>100v.\+', -1)
endif

" ----------------------------------------------------------------------
" | Plugins - Indent Guides |
" ----------------------------------------------------------------------

" Set custom indent colors
" https://github.com/nathanaelkane/vim-indent-guides#setting-custom-indent-colors

let g:indent_guides_auto_colors = 0

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd
      \ guibg=#00323D
      \ ctermbg=Magenta

autocmd VimEnter,Colorscheme * :hi IndentGuidesEven
      \ guibg=#073642
      \ ctermbg=DarkMagenta

autocmd VimEnter,Colorscheme * :hi Floaterm guibg=black 

colorscheme dracula

" ----------------------------------------------------------------------
" | Key Mappings                                                       |
" ----------------------------------------------------------------------

" Use a different mapleader (default is "\").

let mapleader = ","

syntax enable

" all settings about rust server
let g:rustfmt_autosave = 1
let g:rust_recommended_style = 0

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,* ] Search and replace the word under the cursor.

nmap <leader>* :%s/\<<C-r><C-w>\>//<Left>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cc] Toggle code comments.
" https://github.com/tomtom/tcomment_vim

map <leader>cc :TComment<CR>


" open a new float term
map <leader>f :FloatermNew<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cr] Calculate result.
" http://vimcasts.org/e/56

nmap <leader>cr 0yt=A<C-r>=<C-r>"<CR><Esc>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cs] Clear search.

map <leader>cs <Esc>:noh<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,gd] Toggle Git differences.

map <leader>gd :SignifyToggle<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,l ] Toggle `set list`.

nmap <leader>l :set list!<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,n ] Toggle `set relativenumber`.

nmap <leader>n :call ToggleRelativeLineNumbers()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ss] Strip trailing whitespace.

nmap <leader>ss :call StripTrailingWhitespaces()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,t ] Toggle NERDTree.

" map <leader>t :NERDTreeToggle<CR>
map <leader>t :NERDTreeToggle<CR>


" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ti] Toggle indent.

nmap <leader>ti <Plug>IndentGuidesToggle

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,tl] Toggle show limits.

nmap <leader>tl :call ToggleLimits()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ts] Toggle Syntastic.

nmap <leader>ts :SyntasticToggleMode \| w<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,v ] Make the opening of the `.vimrc` file easier.

nmap <leader>v :vsp $MYVIMRC<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,W ] Sudo write.

map <leader>W :w !sudo tee %<CR>

set signcolumn=no

" ----------------------------------------------------------------------
" | Plugins - Markdown |
" ----------------------------------------------------------------------

" Disable Folding
" https://github.com/plasticboy/vim-markdown#disable-folding

let g:vim_markdown_folding_disabled=1
set conceallevel=0
let g:vim_markdown_conceal = 0

" ----------------------------------------------------------------------
" | Plugins - NeoComplCache |
" ----------------------------------------------------------------------

" Enable `neocomplcache` by default
" https://github.com/Shougo/neocomplcache.vim#installation

" let g:neocomplcache_enable_at_startup=1

" Make `<TAB>` autocomplete
" inoremap <expr> <Tab> pumvisible() ? "<C-N>" : "<C-R>=completor#do('complete')<CR>"
" let g:completor_auto_trigger = 0


" ----------------------------------------------------------------------
" | Plugins - Syntastic |
" ----------------------------------------------------------------------


" Inform Syntastic which checkers to use based on file types
" https://github.com/scrooloose/syntastic#3-faq

let g:syntastic_html_checkers = [ 'eslint' ]
let g:syntastic_javascript_checkers = [ 'eslint' ]

" Disable syntax checking by default
let g:syntastic_mode_map = {
      \ 'active_filetypes': [],
      \ 'mode': 'passive',
      \ 'passive_filetypes': []
      \}

" ----------------------------------------------------------------------
" | Helper Functions |
" ----------------------------------------------------------------------
function! GetGitBranchName()
  let branchName = ''
  if exists('g:loaded_fugitive')
    let branchName = '[' . fugitive#head() . ']'
  endif

  return branchName

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! StripTrailingWhitespaces()
  " Save last search and cursor position
  let searchHistory = @/
  let cursorLine = line('.')
  let cursorColumn = col('.')

  " Strip trailing whitespaces
  %s/\s\+$//e

  " Restore previous search history and cursor position
  let @/ = searchHistory
  call cursor(cursorLine, cursorColumn)

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! ToggleLimits()

  " [51,73]
  " - git commit message
  " http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
  " [81]
  " - general use

  if ( &colorcolumn == '73' )
    set colorcolumn+=51,81
  else
    set colorcolumn-=51,81
  endif

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! ToggleRelativeLineNumbers()
  if ( &relativenumber == 1 )
    set number
  else
    set relativenumber
  endif
endfunction

" ----------------------------------------------------------------------
" | Automatic Commands |
" ----------------------------------------------------------------------

" [,v ] Make the opening of the `.vimrc` file easier.

nmap <leader>v :vsp $MYVIMRC<CR>

if has('autocmd')
  :syntax off

  " Autocommand Groups
  " http://learnvimscriptthehardway.stevelosh.com/chapters/14.html

  " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  " Automatically reload the configurations from the
  " `~/.vimrc` and `~/.gvimrc` files whenever they are changed

  augroup auto_reload_vim_configs

    autocmd!
    autocmd BufWritePost vimrc source $MYVIMRC

    if has('gui_running')
      autocmd BufWritePost gvimrc source $MYGVIMRC
    endif

  augroup END


  " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  " Use relative line numbers
  " http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/

  augroup relative_line_numbers
    autocmd!
    " Automatically switch to absolute line numbers when vim loses focus
    autocmd FocusLost * :set number
    " Automatically switch to relative line numbers when vim gains focus
    autocmd FocusGained * :set relativenumber
    " Automatically switch to absolute line numbers when vim is in insert mode
    autocmd InsertEnter * :set number
    " Automatically switch to relative line numbers when vim is in normal mode
    autocmd InsertLeave * :set relativenumber
  augroup END

  " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  " Automatically strip the trailing whitespaces when files are saved

  augroup strip_trailing_whitespaces
    " List of file types that use the trailing whitespaces:
    "
    " * Markdown
    " https://daringfireball.net/projects/markdow

  endif



  autocmd CompleteDone * if pumvisible() == 0 | :redraw!  | endif

  " Use tab for trigger completion with characters ahead and navigate
  " NOTE: There's always complete item selected by default, you may want to enable
  " no select by `"suggest.noselect": true` in your configuration file
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Make <CR> to accept selected completion item or notify coc.nvim to format
  " <C-g>u breaks current undo, please make your own choice
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
        \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  function! MakeNeovideTransparentAndCharm()
    let g:neovide_transparency = 0.0
    let g:transparency = 0.8
    let g:neovide_background_color = '#0f1117'.printf('%x', float2nr(255 * g:transparency))
  endfunction

  " Use <c-space> to trigger completion
  if has('nvim')
    :syntax on
    let g:copilot_enabled = 1
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " exit from terminal mode
  :tnoremap <Esc> <C-\><C-n>

  if exists("g:neovide")
    :syntax on

    " Start NERDTree when Vim starts with a directory argument.
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
          \ execute 'cd '.argv()[0] | endif

    set guifont=Monaco:h20:b

    let g:neovide_transparency = 0.0
    let g:transparency = 0.0
    let g:neovide_background_color = '#000'
    "
    "Remember Previous Window Size
    let g:neovide_remember_window_size = v:true

    let g:neovide_input_use_logo = v:true  " v:true on macOS

    " enable copilot
    let g:copilot_enabled = 1

    " Allow copy paste in neovim
    let g:neovide_input_use_logo = 1

    map <D-v> "+p<CR>
    map! <D-v> <C-R>+
    tmap <D-v> <C-R>+
    vmap <D-c> "+y<CR>

    nnoremap <silent> <D-Left> :tabp<CR>
    nnoremap <silent> <D-Right> :tabn<CR>

    noremap <F4> :call MakeNeovideTransparentAndCharm() <CR>
  endif
